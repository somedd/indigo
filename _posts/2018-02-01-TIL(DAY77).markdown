---
title: "[TIL] DAY77_CS기초(1/14)"
layout: post
date: 2018-02-01 15:00
image: false
headerImage: false
tag:
- markdown
- components
- extra
category: blog
author: jack
description: Markdown summary with different options
# jemoji: '<img class="emoji" title=":ramen:" alt=":ramen:" src="https://assets.github.com/images/icons/emoji/unicode/1f35c.png" height="20" width="20" align="absmiddle">'
---

# DAY77

## 2018년 2월 학업계획!
### 1. 학업계획 방향
 - 너무 많은걸 하려는 욕심부리기 보다는 성취 가능하고, 측정 가능한 구체적인 목표 설정
 - 부족한 부분을 채우거나 반복해서 익숙해지는 방법도 좋음
 - 혼자하기 보다는 여러 명이서 같이하는 게 좋음
 - 슬랙 채널을 적극 활용하세요
  - 공부하던 흐름을 놓지지 않도록 스위프트 문법을 잊어버리지 말기
  - 알고리즘 공부도 해커랭크 같은 곳에서 쉬운것부터 매일 꾸준히 해보는 것도 좋음
  - 알고리즘을 풀 때, 자료구조,메모리를 고려해서 의도적으로 여러번 이해하기

### 2.  What To Do & How To Do

#### (1) CS기초지식 쌓기(10:00~12:30,14:00~17:00/5.5h)
  - https://github.com/somedd/Interview_Question_for_Beginner
	- 개발상식, 자료구조,  알고리즘, 네트워크, 데이터베이스,  운영체제, 디자인패턴
	- Part별 2번 반복
    - 처음 공부할 때는 게시된 내용만 이해하고,
    - 두번째로 공부할 때는 관련 개념 책 참고해서 공부하기
    - 알고리즘은 해커랭크 이용

#### (2) App따라 만들어보기(18:00~22:00/4h, 토요일, 일요일)
  - 내가 좋아하는 App 'WATCHA'를 따라 만들어보즈아!

#### (3) 가고싶은 회사 + 내가 개발하고 싶은 서비스 정하기 + 취업준비(포트폴리오)

## 개발상식(1/6)
### OOP(Object Oriented Programming)
  - 객체지향프로그래밍의 정의 : 현실 세계를 프로그래밍으로 옮겨와 프로그래밍하는 것.
    - 추상화 : 현실 세계의 사물들을 객체라고 보고 그 객체로부터 개발하고자 하는 애플리케이션에 필요한 특징들을 뽑아와 프로그래밍 하는 것

  - 장점
    - 이미 작성했던 코드에 대한 **재사용성이 높다.**
    - 자주 사용되는 로직을 라이브러리로 만들어두면 계속해서 사용할 수 있으며 그 신뢰성을 확보 할 수 있다.
    - 라이브러리를 각종 예외상황에 맞게 잘 만들어두면 개발자가 사소한 실수를 하더라도 그 에러를 컴파일 단계에서 잡아낼 수 있으므로 버그 발생이 줄어든다.
    - 내부적으로 어떻게 동작하는지 몰라도 개발자는 **라이브러리가 제공하는 기능들을 사용할 수 있기 때문에 생산성이 높아지게 된다.**
    - **객체 단위로 코드가 나눠져 작성되기 때문에 디버깅이 쉽고 유지보수에 용이하다.**
    - 데이터 모델링을 할 때 객체와 매핑하는 것이 수월하기 때문에 요구사항을 보다 명확하게 파악하여 프로그래밍 할 수 있다.

  - 단점
    - 객체 간의 정보 교환이 모두 메시지 교환을 통해 일어나므로 실행 시스템에 많은 overhead가 발생하게 된다. -> 하드웨어의 보완으로 해결됨.
    - 객체가 상태를 갖기 떄문에 변수가 존재하고 이 변수를 통해 객체가 예측할 수 없는 상태를 갖게 되어 애플리케이션 내부에서 버그를 발생시킨다는 것이다.
      - 이러한 단점은 함수형 프로그래밍 패러다임의 등장 배경을 통해서 알 수 있게됨.

  - 객체 지향적 설계 원칙
    1. SRP(Single Responsibility Principle) : **단일 책임 원칙**
      - 클래스는 단 하나의 책임을 가져야 하며 클래스를 변경하는 이유는 단 하나의 이유이어야 한다.
    2. OCP(Open-Closed Principle) : **개방-폐쇄 원칙**
      - 확장에는 열려 있어야 하고 변경에는 닫혀 있어야 한다.
    3. LSP(Likov Substitution Principle) : **리스코프 치환 원칙**
      - 상위 타입의 객체를 하위 타입의 객체로 치환해도 상위 타입을 사용하는 프로그램은 정상적으로 동작해야 한다.
    4. ISP(Interface Segregation Principle) : **인터페이스 분리 원칙**
      - 인터페이스는 그 인터페이스를 사용하는 클라이언트를 기준으로 분리해야 한다.
    5. DIP(Dependency Inversion Principle) : **의존 역전 원칙**
      - 고수준 모듈은 저수준 모듈의 구현에 의존해서는 안된다.

  - 개념들 정의 : http://asfirstalways.tistory.com/177

## 자료구조(1/7)

## 알고리즘(1/5)

## 네트워크(1/6)
### HTTP의 GET과 POST 비교
  - 둘 다 HTTP프로토콜을 이용해서 **서버에 무엇인가를 요청할 때 사용하는 방식**. 하지만, 둘의 특징을 제대로 이해하여 기술의 목적에 맞게 알맞은 용도에 사용해야한다.
  - 먼저, 웹이란? : 웹 = WWW = World Wide Web
    - 웹의 3요소: HTTP, HTML, URL
      - URL(Uniform Resource Locator) : 리소스를 식별하는 주소
    - Web Client와 Server
      - Web Client : 주로 웹 브라우저로 항상 요청을 하고, URL을 전송한다.
      - Server : 클라이언트의 요청에 대해 그에 맞는 적당한 문서(HTML문서)를 전송한다.
      - 프록시: 클라이언트와 서버 사이에 존재. 무언가 일을 해 준다.
        - 캐싱, 필터링, 로드 밸런싱, 인증, 로깅 등의 다양한 기능을 수행

  - HTTP(HyperText Transfer Protocol)의 정의 : 인터넷에서, 웹 서버와 사용자의 인터넷 브라우저 사이에 문서를 전송하기 위해 사용되는 통신 규약
    - WWW 상에서 정보를 주고받을 수 있는 프로토콜. 주로 HTML 문서를 주고받는 데에 쓰인다. TCP와 UDP를 사용하며, 80번 포트를 사용한다. *TCP/UDP는 나중에 다시 공부.*
    ![screensh_77_1](http://public.codesquad.kr/honux/images/w302.png){: class="bigger-image" }

  - GET vs POST
    - HTTP Request 메시지의 구조
      ![screensh_77_2](http://public.codesquad.kr/honux/images/w303.png){: class="bigger-image" }

    - GET : 요청하는 데이터가 **HTTP Request Message의 Header 부분의 url에 담겨서 전송** 된다. 때문에 url 상에 데이터가 붙어 request를 보내게 되는 것이다. 이러한 방식은 url이라는 공간에 담겨가기 때문에 전송할 수 있는 데이터의 크기가 제한적이다. 또 보안이 필요한 데이터에 대해서는 데이터가 그대로 url에 노출되므로 GET방식은 적절하지 않다. (ex. password)

    - POST : 요청하는 데이터가 **HTTP Message의 Body 부분에 데이터가 담겨서 전송** 된다. 때문에 바이너리 데이터를 요청하는 경우 POST 방식으로 보내야 하는 것처럼 데이터 크기가 GET 방식보다 크고 보안면에서 낫다.

    - GET방식과 POST방식의 용도 : 우선 GET은 가져오는 것이다. 서버에서 어떤 데이터를 가져와서 보여준다거나 하는 용도이지 서버의 값이나 상태 등을 변경하지 않는다. SELECT 적인 성향을 갖고 있다고 볼 수 있는 것이다. 반면에 POST는 서버의 값이나 상태를 변경하기 위해서 또는 추가하기 위해서 사용된다.
      - 부수적인 차이점을 좀 더 살펴보자면 GET 방식의 요청은 브라우저에서 Caching 할 수 있다. 때문에 POST 방식으로 요청해야 할 것을 보내는 데이터의 크기가 작고 보안적인 문제가 없다는 이유로 GET 방식으로 요청한다면 기존에 caching 되었던 데이터가 요청될 가능성이 존재한다. 때문에 목적에 맞는 기술을 사용해야 하는 것이다.

## 데이터베이스(1/6)
### 프로세스와 스레드의 차이



## 운영체제(1/9)
